plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.3.70'
	id 'java-library'
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id "com.github.gmazzo.buildconfig" version "1.7.1"
}

repositories {
	jcenter()
}

dependencies {
	implementation platform('org.jetbrains.kotlin:kotlin-bom')
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	testImplementation 'org.jetbrains.kotlin:kotlin-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
	swaggerCodegen 'org.openapitools:openapi-generator-cli:3.3.4'
	
	implementation "com.squareup.moshi:moshi-kotlin:1.5.0"
	implementation "com.squareup.moshi:moshi-adapters:1.5.0"
	implementation "com.squareup.okhttp3:okhttp:3.8.0"
	implementation "org.threeten:threetenbp:1.3.6"
	testImplementation "io.kotlintest:kotlintest:2.0.2"
	
}

group='org.thebluealliance'

swaggerSources {
	tba {
		inputFile = file('openapi.yaml')
		code {
			language = 'kotlin'
			configFile = file("config.json")
//			dependsOn validation
		}
	}
}

buildConfig {
	buildConfigField 'String', 'TBA_Auth_Key', "\"${project["tba_api_key"]}\""
}

generateSwaggerCodeTba.doLast {
	def root = "${swaggerSources.tba.code.outputDir}/src/main/kotlin/com/thebluealliance/"
	def toDelete = [
		"model/EventPredictions.kt", // EventPredictions is a data class with no properties
		"infrastructure/RequestConfig.kt", // We need to add api key to all RequestConfig headers
	]
	toDelete.each { file(root + it).delete() }
}

sourceSets.main.kotlin.srcDir "${swaggerSources.tba.code.outputDir}/src/main/kotlin"

compileKotlin {
	dependsOn generateSwaggerCodeTba
}
