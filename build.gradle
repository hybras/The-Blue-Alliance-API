plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.3.70'
	id 'java-library'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

repositories {
	jcenter()
}

dependencies {
	implementation platform('org.jetbrains.kotlin:kotlin-bom')
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	testImplementation 'org.jetbrains.kotlin:kotlin-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
	swaggerCodegen 'org.openapitools:openapi-generator-cli:3.3.4'
	
	implementation "com.squareup.moshi:moshi-kotlin:1.5.0"
	implementation "com.squareup.moshi:moshi-adapters:1.5.0"
	implementation "com.squareup.okhttp3:okhttp:3.8.0"
	implementation "org.threeten:threetenbp:1.3.6"
	testImplementation "io.kotlintest:kotlintest:2.0.2"
	
}

swaggerSources {
	tba {
		inputFile = file('openapi.yaml')
		code {
			language = 'kotlin'
			configFile = file("config.json")
//			dependsOn validation
		}
	}
}

sourceSets.main.kotlin.srcDir "${swaggerSources.tba.code.outputDir}/src/main/kotlin"

task lastMinuteFixes {
	dependsOn generateSwaggerCodeTba
	doLast {
		// The following snippet changes EventPredictions from a data class to a normal class, on account of its properties being dynamically known
		def EventPredictions = file(
			"${swaggerSources.tba.code.outputDir}/src/main/kotlin/com/thebluealliance/model/EventPredictions.kt"
		)
		EventPredictions.write(
			EventPredictions.text.replaceFirst("data ", "")
		)
		println("Fixed EventPredictions")
		println("****************************************************************")
		// Add api key to all RequestConfig headers
		def RequestConfig = file(
			"${swaggerSources.tba.code.outputDir}/src/main/kotlin/com/thebluealliance/infrastructure/RequestConfig.kt"
		)
		RequestConfig.write("""
package com.thebluealliance.infrastructure

/**
 * Defines a config object for a given request.
 * NOTE: This object doesn't include 'body' because it
 *       allows for caching of the constructed object
 *       for many request definitions.
 * NOTE: Headers is a Map<String,String> because rfc2616 defines
 *       multi-valued headers as csv-only.
 */
class RequestConfig(
    val method: RequestMethod,
    val path: String,
    headers: Map<String, String> = mapOf(),
    val query: Map<String, List<String>> = mapOf()
) {
\tval headers = headers
\t\t.toMutableMap()
\t\t.apply {
\t\t\tthis["X-TBA-Auth-Key"] = "${project["tba_api_key"]}"
\t\t}.toMap()
}

""")
		println("Injected TBA-Auth-Key")
		println("****************************************************************")
	}
	
}

compileKotlin {
	dependsOn project.tasks.findByName("lastMinuteFixes")
}
