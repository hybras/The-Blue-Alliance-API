/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* The version of the OpenAPI document: 3.8.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.thebluealliance.models


import com.squareup.moshi.Json

/**
 * 
 * @param initLineRobot1 
 * @param endgameRobot1 
 * @param initLineRobot2 
 * @param endgameRobot2 
 * @param initLineRobot3 
 * @param endgameRobot3 
 * @param autoCellsBottom 
 * @param autoCellsOuter 
 * @param autoCellsInner 
 * @param teleopCellsBottom 
 * @param teleopCellsOuter 
 * @param teleopCellsInner 
 * @param stage1Activated 
 * @param stage2Activated 
 * @param stage3Activated 
 * @param stage3TargetColor 
 * @param endgameRungIsLevel 
 * @param autoInitLinePoints 
 * @param autoCellPoints 
 * @param autoPoints 
 * @param teleopCellPoints 
 * @param controlPanelPoints 
 * @param endgamePoints 
 * @param teleopPoints 
 * @param shieldOperationalRankingPoint 
 * @param shieldEnergizedRankingPoint 
 * @param tbaShieldEnergizedRankingPointFromFoul Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
 * @param tbaNumRobotsHanging Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
 * @param foulCount 
 * @param techFoulCount 
 * @param adjustPoints 
 * @param foulPoints 
 * @param rp 
 * @param totalPoints 
 */

data class MatchScoreBreakdown2020Alliance (
    @Json(name = "initLineRobot1")
    val initLineRobot1: kotlin.String? = null,
    @Json(name = "endgameRobot1")
    val endgameRobot1: kotlin.String? = null,
    @Json(name = "initLineRobot2")
    val initLineRobot2: kotlin.String? = null,
    @Json(name = "endgameRobot2")
    val endgameRobot2: kotlin.String? = null,
    @Json(name = "initLineRobot3")
    val initLineRobot3: kotlin.String? = null,
    @Json(name = "endgameRobot3")
    val endgameRobot3: kotlin.String? = null,
    @Json(name = "autoCellsBottom")
    val autoCellsBottom: kotlin.Int? = null,
    @Json(name = "autoCellsOuter")
    val autoCellsOuter: kotlin.Int? = null,
    @Json(name = "autoCellsInner")
    val autoCellsInner: kotlin.Int? = null,
    @Json(name = "teleopCellsBottom")
    val teleopCellsBottom: kotlin.Int? = null,
    @Json(name = "teleopCellsOuter")
    val teleopCellsOuter: kotlin.Int? = null,
    @Json(name = "teleopCellsInner")
    val teleopCellsInner: kotlin.Int? = null,
    @Json(name = "stage1Activated")
    val stage1Activated: kotlin.Boolean? = null,
    @Json(name = "stage2Activated")
    val stage2Activated: kotlin.Boolean? = null,
    @Json(name = "stage3Activated")
    val stage3Activated: kotlin.Boolean? = null,
    @Json(name = "stage3TargetColor")
    val stage3TargetColor: kotlin.String? = null,
    @Json(name = "endgameRungIsLevel")
    val endgameRungIsLevel: kotlin.String? = null,
    @Json(name = "autoInitLinePoints")
    val autoInitLinePoints: kotlin.Int? = null,
    @Json(name = "autoCellPoints")
    val autoCellPoints: kotlin.Int? = null,
    @Json(name = "autoPoints")
    val autoPoints: kotlin.Int? = null,
    @Json(name = "teleopCellPoints")
    val teleopCellPoints: kotlin.Int? = null,
    @Json(name = "controlPanelPoints")
    val controlPanelPoints: kotlin.Int? = null,
    @Json(name = "endgamePoints")
    val endgamePoints: kotlin.Int? = null,
    @Json(name = "teleopPoints")
    val teleopPoints: kotlin.Int? = null,
    @Json(name = "shieldOperationalRankingPoint")
    val shieldOperationalRankingPoint: kotlin.Boolean? = null,
    @Json(name = "shieldEnergizedRankingPoint")
    val shieldEnergizedRankingPoint: kotlin.Boolean? = null,
    /* Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul. */
    @Json(name = "tba_shieldEnergizedRankingPointFromFoul")
    val tbaShieldEnergizedRankingPointFromFoul: kotlin.Boolean? = null,
    /* Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match. */
    @Json(name = "tba_numRobotsHanging")
    val tbaNumRobotsHanging: kotlin.Int? = null,
    @Json(name = "foulCount")
    val foulCount: kotlin.Int? = null,
    @Json(name = "techFoulCount")
    val techFoulCount: kotlin.Int? = null,
    @Json(name = "adjustPoints")
    val adjustPoints: kotlin.Int? = null,
    @Json(name = "foulPoints")
    val foulPoints: kotlin.Int? = null,
    @Json(name = "rp")
    val rp: kotlin.Int? = null,
    @Json(name = "totalPoints")
    val totalPoints: kotlin.Int? = null
)

