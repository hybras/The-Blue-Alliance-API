/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* The version of the OpenAPI document: 3.8.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.thebluealliance.apis

import com.thebluealliance.models.DistrictRanking
import com.thebluealliance.models.Event
import com.thebluealliance.models.EventSimple
import com.thebluealliance.models.Team
import com.thebluealliance.models.TeamEventStatus
import com.thebluealliance.models.TeamSimple

import com.thebluealliance.infrastructure.ApiClient
import com.thebluealliance.infrastructure.ClientException
import com.thebluealliance.infrastructure.ClientError
import com.thebluealliance.infrastructure.ServerException
import com.thebluealliance.infrastructure.ServerError
import com.thebluealliance.infrastructure.MultiValueMap
import com.thebluealliance.infrastructure.RequestConfig
import com.thebluealliance.infrastructure.RequestMethod
import com.thebluealliance.infrastructure.ResponseType
import com.thebluealliance.infrastructure.Success
import com.thebluealliance.infrastructure.toMultiValue

class ListApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.thebluealliance.baseUrl", "https://www.thebluealliance.com/api/v3")
        }
    }

    /**
    * 
    * Gets a list of events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Event>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictEvents(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Event> {
        val localVariableConfig = getDistrictEventsRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Event>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Event>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictEvents
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictEventsRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/events".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of event keys for events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictEventsKeys(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getDistrictEventsKeysRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictEventsKeys
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictEventsKeysRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/events/keys".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<EventSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictEventsSimple(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<EventSimple> {
        val localVariableConfig = getDistrictEventsSimpleRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<EventSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<EventSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictEventsSimple
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictEventsSimpleRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/events/simple".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of team district rankings for the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<DistrictRanking>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictRankings(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<DistrictRanking> {
        val localVariableConfig = getDistrictRankingsRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<DistrictRanking>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DistrictRanking>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictRankings
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictRankingsRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/rankings".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeams(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getDistrictTeamsRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeams
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeamsKeys(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getDistrictTeamsKeysRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeamsKeys
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsKeysRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams/keys".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeamsSimple(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getDistrictTeamsSimpleRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeamsSimple
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsSimpleRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams/simple".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeams(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getEventTeamsRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeams
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; keys that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsKeys(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getEventTeamsKeysRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsKeys
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsKeysRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/keys".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsSimple(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getEventTeamsSimpleRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsSimple
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsSimpleRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/simple".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a key-value list of the event statuses for teams competing at the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.Map<kotlin.String, TeamEventStatus>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsStatuses(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.Map<kotlin.String, TeamEventStatus> {
        val localVariableConfig = getEventTeamsStatusesRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.Map<kotlin.String, TeamEventStatus>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, TeamEventStatus>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsStatuses
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsStatusesRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/statuses".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of events in the given year.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Event>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventsByYear(year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Event> {
        val localVariableConfig = getEventsByYearRequestConfig(year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Event>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Event>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventsByYear
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventsByYearRequestConfig(year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/events/{year}".replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of event keys in the given year.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventsByYearKeys(year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getEventsByYearKeysRequestConfig(year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventsByYearKeys
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventsByYearKeysRequestConfig(year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/events/{year}/keys".replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of events in the given year.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<EventSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventsByYearSimple(year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<EventSimple> {
        val localVariableConfig = getEventsByYearSimpleRequestConfig(year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<EventSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<EventSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventsByYearSimple
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventsByYearSimpleRequestConfig(year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/events/{year}/simple".replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a key-value list of the event statuses for events this team has competed at in the given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.Map<kotlin.String, TeamEventStatus>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsStatusesByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.Map<kotlin.String, TeamEventStatus> {
        val localVariableConfig = getTeamEventsStatusesByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.Map<kotlin.String, TeamEventStatus>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, TeamEventStatus>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsStatusesByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsStatusesByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/{year}/statuses".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeams(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getTeamsRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeams
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYear(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getTeamsByYearRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYear
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYearKeys(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamsByYearKeysRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYearKeys
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearKeysRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}/keys".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYearSimple(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getTeamsByYearSimpleRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYearSimple
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearSimpleRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}/simple".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsKeys(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamsKeysRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsKeys
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsKeysRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}/keys".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsSimple(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getTeamsSimpleRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsSimple
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsSimpleRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}/simple".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
