/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* The version of the OpenAPI document: 3.8.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.thebluealliance.apis

import com.thebluealliance.models.Award
import com.thebluealliance.models.DistrictList
import com.thebluealliance.models.DistrictRanking
import com.thebluealliance.models.Event
import com.thebluealliance.models.EventSimple
import com.thebluealliance.models.Match
import com.thebluealliance.models.MatchSimple
import com.thebluealliance.models.Media
import com.thebluealliance.models.Team
import com.thebluealliance.models.TeamEventStatus
import com.thebluealliance.models.TeamRobot
import com.thebluealliance.models.TeamSimple

import com.thebluealliance.infrastructure.ApiClient
import com.thebluealliance.infrastructure.ClientException
import com.thebluealliance.infrastructure.ClientError
import com.thebluealliance.infrastructure.ServerException
import com.thebluealliance.infrastructure.ServerError
import com.thebluealliance.infrastructure.MultiValueMap
import com.thebluealliance.infrastructure.RequestConfig
import com.thebluealliance.infrastructure.RequestMethod
import com.thebluealliance.infrastructure.ResponseType
import com.thebluealliance.infrastructure.Success
import com.thebluealliance.infrastructure.toMultiValue

class TeamApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.thebluealliance.baseUrl", "https://www.thebluealliance.com/api/v3")
        }
    }

    /**
    * 
    * Gets a list of team district rankings for the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<DistrictRanking>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictRankings(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<DistrictRanking> {
        val localVariableConfig = getDistrictRankingsRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<DistrictRanking>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DistrictRanking>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictRankings
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictRankingsRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/rankings".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeams(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getDistrictTeamsRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeams
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeamsKeys(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getDistrictTeamsKeysRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeamsKeys
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsKeysRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams/keys".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDistrictTeamsSimple(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getDistrictTeamsSimpleRequestConfig(districtKey = districtKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getDistrictTeamsSimple
    *
    * @param districtKey TBA District Key, eg &#x60;2016fim&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getDistrictTeamsSimpleRequestConfig(districtKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/district/{district_key}/teams/simple".replace("{"+"district_key"+"}", "$districtKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeams(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getEventTeamsRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeams
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; keys that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsKeys(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getEventTeamsKeysRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsKeys
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsKeysRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/keys".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsSimple(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getEventTeamsSimpleRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsSimple
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsSimpleRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/simple".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a key-value list of the event statuses for teams competing at the given event.
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.Map<kotlin.String, TeamEventStatus>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventTeamsStatuses(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.Map<kotlin.String, TeamEventStatus> {
        val localVariableConfig = getEventTeamsStatusesRequestConfig(eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.Map<kotlin.String, TeamEventStatus>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, TeamEventStatus>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getEventTeamsStatuses
    *
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getEventTeamsStatusesRequestConfig(eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/event/{event_key}/teams/statuses".replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a &#x60;Team&#x60; object for the team referenced by the given key.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return Team
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeam(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : Team {
        val localVariableConfig = getTeamRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, Team>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Team
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeam
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of awards the given team has won.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Award>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamAwards(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Award> {
        val localVariableConfig = getTeamAwardsRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Award>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Award>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamAwards
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamAwardsRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/awards".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of awards the given team has won in a given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Award>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamAwardsByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Award> {
        val localVariableConfig = getTeamAwardsByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Award>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Award>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamAwardsByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamAwardsByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/awards/{year}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<DistrictList>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamDistricts(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<DistrictList> {
        val localVariableConfig = getTeamDistrictsRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<DistrictList>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DistrictList>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamDistricts
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamDistrictsRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/districts".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of awards the given team won at the given event.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Award>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventAwards(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Award> {
        val localVariableConfig = getTeamEventAwardsRequestConfig(teamKey = teamKey, eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Award>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Award>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventAwards
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventAwardsRequestConfig(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/event/{event_key}/awards".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of matches for the given team and event.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Match>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventMatches(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Match> {
        val localVariableConfig = getTeamEventMatchesRequestConfig(teamKey = teamKey, eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Match>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Match>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventMatches
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventMatchesRequestConfig(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/event/{event_key}/matches".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of match keys for matches for the given team and event.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventMatchesKeys(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamEventMatchesKeysRequestConfig(teamKey = teamKey, eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventMatchesKeys
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventMatchesKeysRequestConfig(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/event/{event_key}/matches/keys".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of matches for the given team and event.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Match>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventMatchesSimple(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Match> {
        val localVariableConfig = getTeamEventMatchesSimpleRequestConfig(teamKey = teamKey, eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Match>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Match>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventMatchesSimple
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventMatchesSimpleRequestConfig(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/event/{event_key}/matches/simple".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets the competition rank and status of the team at the given event.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return TeamEventStatus
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventStatus(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : TeamEventStatus {
        val localVariableConfig = getTeamEventStatusRequestConfig(teamKey = teamKey, eventKey = eventKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, TeamEventStatus>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamEventStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventStatus
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param eventKey TBA Event Key, eg &#x60;2016nytr&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventStatusRequestConfig(teamKey: kotlin.String, eventKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/event/{event_key}/status".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"event_key"+"}", "$eventKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of all events this team has competed at.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Event>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEvents(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Event> {
        val localVariableConfig = getTeamEventsRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Event>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Event>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEvents
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of events this team has competed at in the given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Event>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Event> {
        val localVariableConfig = getTeamEventsByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Event>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Event>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/{year}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of the event keys for events this team has competed at in the given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsByYearKeys(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamEventsByYearKeysRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsByYearKeys
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsByYearKeysRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/{year}/keys".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of events this team has competed at in the given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<EventSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsByYearSimple(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<EventSimple> {
        val localVariableConfig = getTeamEventsByYearSimpleRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<EventSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<EventSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsByYearSimple
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsByYearSimpleRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/{year}/simple".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of the event keys for all events this team has competed at.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsKeys(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamEventsKeysRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsKeys
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsKeysRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/keys".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of all events this team has competed at.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<EventSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsSimple(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<EventSimple> {
        val localVariableConfig = getTeamEventsSimpleRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<EventSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<EventSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsSimple
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsSimpleRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/simple".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a key-value list of the event statuses for events this team has competed at in the given year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.Map<kotlin.String, TeamEventStatus>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamEventsStatusesByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.Map<kotlin.String, TeamEventStatus> {
        val localVariableConfig = getTeamEventsStatusesByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.Map<kotlin.String, TeamEventStatus>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, TeamEventStatus>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamEventsStatusesByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamEventsStatusesByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/events/{year}/statuses".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of matches for the given team and year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Match>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMatchesByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Match> {
        val localVariableConfig = getTeamMatchesByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Match>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Match>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMatchesByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMatchesByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/matches/{year}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of match keys for matches for the given team and year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMatchesByYearKeys(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamMatchesByYearKeysRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMatchesByYearKeys
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMatchesByYearKeysRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/matches/{year}/keys".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a short-form list of matches for the given team and year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<MatchSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMatchesByYearSimple(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<MatchSimple> {
        val localVariableConfig = getTeamMatchesByYearSimpleRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<MatchSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<MatchSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMatchesByYearSimple
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMatchesByYearSimpleRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/matches/{year}/simple".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Media (videos / pictures) for the given team and tag.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param mediaTag Media Tag which describes the Media. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Media>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMediaByTag(teamKey: kotlin.String, mediaTag: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Media> {
        val localVariableConfig = getTeamMediaByTagRequestConfig(teamKey = teamKey, mediaTag = mediaTag, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Media>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Media>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMediaByTag
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param mediaTag Media Tag which describes the Media. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMediaByTagRequestConfig(teamKey: kotlin.String, mediaTag: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/media/tag/{media_tag}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"media_tag"+"}", "$mediaTag"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Media (videos / pictures) for the given team, tag and year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param mediaTag Media Tag which describes the Media. 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Media>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMediaByTagYear(teamKey: kotlin.String, mediaTag: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Media> {
        val localVariableConfig = getTeamMediaByTagYearRequestConfig(teamKey = teamKey, mediaTag = mediaTag, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Media>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Media>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMediaByTagYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param mediaTag Media Tag which describes the Media. 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMediaByTagYearRequestConfig(teamKey: kotlin.String, mediaTag: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/media/tag/{media_tag}/{year}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"media_tag"+"}", "$mediaTag").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Media (videos / pictures) for the given team and year.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Media>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamMediaByYear(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Media> {
        val localVariableConfig = getTeamMediaByYearRequestConfig(teamKey = teamKey, year = year, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Media>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Media>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamMediaByYear
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamMediaByYearRequestConfig(teamKey: kotlin.String, year: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/media/{year}".replace("{"+"team_key"+"}", "$teamKey").replace("{"+"year"+"}", "$year"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamRobot>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamRobots(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamRobot> {
        val localVariableConfig = getTeamRobotsRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamRobot>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamRobot>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamRobots
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamRobotsRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/robots".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return TeamSimple
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamSimple(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : TeamSimple {
        val localVariableConfig = getTeamSimpleRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, TeamSimple>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamSimple
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamSimple
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamSimpleRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/simple".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Media (social media) for the given team.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Media>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamSocialMedia(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Media> {
        val localVariableConfig = getTeamSocialMediaRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Media>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Media>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamSocialMedia
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamSocialMediaRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/social_media".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of years in which the team participated in at least one competition.
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.Int>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamYearsParticipated(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.Int> {
        val localVariableConfig = getTeamYearsParticipatedRequestConfig(teamKey = teamKey, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.Int>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.Int>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamYearsParticipated
    *
    * @param teamKey TBA Team Key, eg &#x60;frc254&#x60; 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamYearsParticipatedRequestConfig(teamKey: kotlin.String, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team/{team_key}/years_participated".replace("{"+"team_key"+"}", "$teamKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeams(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getTeamsRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeams
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<Team>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYear(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<Team> {
        val localVariableConfig = getTeamsByYearRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<Team>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Team>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYear
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYearKeys(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamsByYearKeysRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYearKeys
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearKeysRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}/keys".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsByYearSimple(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getTeamsByYearSimpleRequestConfig(year = year, pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsByYearSimple
    *
    * @param year Competition Year (or Season). Must be 4 digits. 
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsByYearSimpleRequestConfig(year: kotlin.Int, pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{year}/{page_num}/simple".replace("{"+"year"+"}", "$year").replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsKeys(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<kotlin.String> {
        val localVariableConfig = getTeamsKeysRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsKeys
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsKeysRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}/keys".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return kotlin.collections.List<TeamSimple>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTeamsSimple(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : kotlin.collections.List<TeamSimple> {
        val localVariableConfig = getTeamsSimpleRequestConfig(pageNum = pageNum, ifModifiedSince = ifModifiedSince)

        val localVarResponse = request<Unit, kotlin.collections.List<TeamSimple>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TeamSimple>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getTeamsSimple
    *
    * @param pageNum Page number of results to return, zero-indexed 
    * @param ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
    * @return RequestConfig
    */
    fun getTeamsSimpleRequestConfig(pageNum: kotlin.Int, ifModifiedSince: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifModifiedSince?.apply { localVariableHeaders["If-Modified-Since"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/teams/{page_num}/simple".replace("{"+"page_num"+"}", "$pageNum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
